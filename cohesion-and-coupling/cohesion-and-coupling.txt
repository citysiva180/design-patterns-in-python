
Cohesion : 

- Cohesion is the degree in which elements which belongs to a class
- Does this mean, it a measurement of seperation of concerns? It might be..
- Its easy to maintain and understand

Coupling :  

- Coupling is the measure of dependency of parts of  2 code with each other
- High coupling complicates everything. Your other program has to be modified to support the same. 
- To avoid coupling, you will just need to parameters or data between these codes  


###################################-----: BEFORE :-----##########################################

Example code : 

# Example code to observe cohesion and coupling
import string
import random


class VehicleRegistry:

    def generate_vehicle_id(self, length):
        return ''.join(random.choices(string.ascii_uppercase, k=length))

    def generate_vehicle_license(self, id):
        return f"{id[:2]}-{''.join(random.choices(string.digits, k=2))}-{''.join(random.choices(string.ascii_uppercase, k=2))}"


class Application:

    def register_vehicle(self, brand: string):   ----> High Coupling in code 
        # create a registry instance
        registry = VehicleRegistry()

        # generate a vehicle id of length 12
        vehicle_id = registry.generate_vehicle_id(12)

        # now generate a license plate for the vehicle
        # using the first two characters of the vehicle id
        license_plate = registry.generate_vehicle_license(vehicle_id)

        # compute the catalogue price           ---> Non related function - Low cohesion
        catalogue_price = 0
        if brand == "Tesla Model 3":
            catalogue_price = 60000
        elif brand == "Volkswagen ID3":
            catalogue_price = 35000
        elif brand == "BMW 5":
            catalogue_price = 45000

        # compute the tax percentage (default 5% of the catalogue price, except for electric cars where it is 2%)
        tax_percentage = 0.05
        if brand == "Tesla Model 3" or brand == "Volkswagen ID3":
            tax_percentage = 0.02

        # compute the payable tax
        payable_tax = tax_percentage * catalogue_price

        # print out the vehicle registration information
        print("Registration complete. Vehicle information:")
        print(f"Brand: {brand}")
        print(f"Id: {vehicle_id}")
        print(f"License plate: {license_plate}")
        print(f"Payable tax: {payable_tax}")


app = Application()
app.register_vehicle("Tesla Model 3")

################################----: AFTER :-----##################################

# Example code to observe cohesion and coupling
import string
import random


# created 2 classes specfic to info and final instance
class VehicleInfo:

    def __init__(self, brand, catalogue_price, electric):
        self.brand = brand
        self.catalogue_price = catalogue_price
        self.electric = electric

    brand: str
    catalogue_price: int
    electric: bool

    def compute_tax(self):
        tax_percentage = 0.02 if self.electric else 0.05
        return tax_percentage * self.catalogue_price

    def print(self):
        print(f"Brand : {self.brand}")
        print(f"Payable Tax : {self.compute_tax()}")


class Vehicle:

    def __init__(self, id, license_plate, info):
        self.id = id
        self.license_plate = license_plate
        self.info = info

    id: str
    license_plate: str
    info: VehicleInfo

    def print(self):
        print(f"ID : {self.id}")
        print(f"License plate: {self.license_plate}")
        self.info.print()


class VehicleRegistry:

    vehicle_info = {}

    def __init__(self):
        self.add_vehicle_info("Tesla Model 3", True, 60000)
        self.add_vehicle_info("Volkswagon ID3", True, 35000)
        self.add_vehicle_info("BMW 5", False, 45000)

    def add_vehicle_info(self, brand, electric, catalogue_price):
        self.vehicle_info[brand] = VehicleInfo(
            brand, electric, catalogue_price)

    def generate_vehicle_id(self, length):
        return ''.join(random.choices(string.ascii_uppercase, k=length))

    def generate_vehicle_license(self, id):
        return f"{id[:2]}-{''.join(random.choices(string.digits, k=2))}-{''.join(random.choices(string.ascii_uppercase, k=2))}"

    def create_vehicle(self, brand):

        vehicle_id = self.generate_vehicle_id(12)
        license_plate = self.generate_vehicle_license(vehicle_id)
        return Vehicle(vehicle_id, license_plate, self.vehicle_info[brand])


class Application:

    def register_vehicle(self, brand: string):
        # create a registry instance
        registry = VehicleRegistry()
        return registry.create_vehicle(brand)


app = Application()
Tesla = app.register_vehicle("Tesla Model 3")
Tesla.print()
print()
BMW_5 = app.register_vehicle("BMW 5")
BMW_5.print()
